import net.fabricmc.loom.task.RemapJarTask
import net.fabricmc.loom.task.ValidateMixinNameTask
import net.fabricmc.loom.util.gradle.SourceSetHelper

import java.nio.file.Paths
import java.util.stream.Collectors

plugins {
    id "java-library"
    id "idea"
    id "maven-publish"
    id 'jacoco'
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "io.github.p03w.machete" version "2.0.1" apply false // automatic jar compressing on build
}

def ENV = System.getenv()

static def getBuildNumber() {
    def ENV = System.getenv()
    return ENV.GITHUB_RUN_NUMBER != null ? "-build." + ENV.GITHUB_RUN_NUMBER.toString() : "-local"
}

static def getStable() {
    def ENV = System.getenv()
    return ENV.GITHUB_REF == null || ENV.GITHUB_REF.endsWith("-dev") ? "-SNAPSHOT" : ""
}

@SuppressWarnings('unused')
def moduleDependency(Project project, List<String> depNames) {
    def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: "namedElements") }

    project.dependencies {
        deps.each {
            api it
        }
    }
}

configurations.configureEach {
    resolutionStrategy {
        // fixes loom using a loader version from a dependency
        force("net.fabricmc:fabric-loader:$project.loader_version")
    }
}

allprojects  {
    apply plugin: "java-library"
    apply plugin: "idea"
    apply plugin: "fabric-loom"

    group = project.mod_group_id
    base {
        archivesName = "${mod_id}"
    }
    version = "${mod_version}+mc${project.minecraft_version}${getStable()}${getBuildNumber()}"

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    java {
        withSourcesJar()
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url = "https://maven.quiltmc.org/repository/release" } // QM

        maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
        maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib
        maven { url = "https://mvn.devos.one/releases/" } // Porting Lib
        maven { url = "https://jitpack.io/" } // for Porting Lib: Mixin Extras, Fabric ASM
        maven { // Forge Config API Port
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
        maven { // Modern KeyBinding
            url = "https://maven.nova-committee.cn/releases"
        }

        maven { url = "https://maven.terraformersmc.com/releases/" } // Emi
        maven { url = "https://maven.shedaniel.me/" } // REI and deps
        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            name = "entity reach"
            url = "https://maven.jamieswhiteshirt.com/libs-release/"
        }

        maven { url = 'https://maven.blamejared.com' }
        maven { url = "https://modmaven.dev" } // Jei
        maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
        maven { url = "https://www.cursemaven.com" } // Balm, CraftingTweaks
        maven { url = "https://maven.resourcefulbees.com/repository/maven-public/" } // Chipped, resourcefullib, athena
    }

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }

        test {
            compileClasspath += testmod.compileClasspath
            runtimeClasspath += testmod.runtimeClasspath
        }
    }

    loom {
        runtimeOnlyLog4j = true

        runs {
            client {
                client()
                ideConfigGenerated project.rootProject == project
                property "fabric.modsFolder", Paths.get(project.getProjectDir().toString(), it.runDir, "mods${project.minecraft_version}").toString()
            }

            server {
                server()
                ideConfigGenerated project.rootProject == project
                property "fabric.modsFolder", Paths.get(project.getProjectDir().toString(), it.runDir, "mods${project.minecraft_version}").toString()
            }

            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmod
            }

            testmodServer {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }
    }

    loom.runs.configureEach {
        property("mixin.debug.export=true") // export all mixins
        property("mixin.debug.strict.unique=true") // strictly enforce that @Unique things are private
        vmArg("-enableassertions")
    }

    allprojects.each { p ->
        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
        }

        loom.mods.register(p.name + "-testmod") {
            sourceSet p.sourceSets.testmod
        }
    }

    dependencies {
        minecraft("com.mojang:minecraft:$project.minecraft_version")
        mappings(loom.layered {
            it.mappings("org.quiltmc:quilt-mappings:$project.minecraft_version+build.$project.qm_version:intermediary-v2")
            it.officialMojangMappings() { nameSyntheticMembers = false }
        })

        modImplementation("net.fabricmc:fabric-loader:$project.loader_version")
        modImplementation("net.fabricmc.fabric-api:fabric-api:$project.fabric_version")

        implementation("javax.annotation:javax.annotation-api:1.3.2")
        implementation("com.google.code.findbugs:jsr305:3.0.2")

        modImplementation("committee.nova.mkb.fabric:mkb-${project.minecraft_version}:${project.mkb_mod_version}") { transitive = false }

        modImplementation("com.terraformersmc:modmenu:$project.modmenu_version")

        // Test dependencies
        testmodImplementation "org.mockito:mockito-core:5.10.+"
        testmodImplementation sourceSets.main.output

        testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
        testImplementation sourceSets.testmod.output
    }

    test {
//        dependsOn("processResources")

        useJUnitPlatform()
        /*testLogging {
            events "passed", "skipped", "failed"
        }*/

        afterEvaluate {
            // See: https://github.com/FabricMC/fabric-loader/pull/585
            def classPathGroups = loom.mods.stream()
                    .map { modSettings ->
                        SourceSetHelper.getClasspath(modSettings, getProject()).stream()
                                .map(File.&getAbsolutePath)
                                .collect(Collectors.joining(File.pathSeparator))
                    }
                    .collect(Collectors.joining(File.pathSeparator+File.pathSeparator))

            systemProperty("fabric.classPathGroups", classPathGroups)
        }
    }

    tasks.withType(ProcessResources).configureEach {
        exclude '.cache'

        var replaceProperties = [
                mod_id              : mod_id,
                mod_version         : version,
                minecraft_version   : minecraft_version,
                loader_version      : loader_version,
                fabric_version      : fabric_version,
                sc_version          : project(":SophisticatedCore").version,
                mkb_version         : mkb_mod_version,
                forge_config_version: forge_config_api_port_version,
                energy_version      : energy_version,
                port_lib_version    : port_lib_version
        ]

        inputs.properties replaceProperties

        filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
            expand replaceProperties + [project: project]
        }
    }

    tasks.register('testmodJar', Jar) {
        from sourceSets.testmod.output

        destinationDirectory = project.getLayout().getBuildDirectory().dir("devlibs")
        archiveClassifier = "testmod"
    }

    tasks.register('remapTestmodJar', RemapJarTask) {
        dependsOn testmodJar
        input = testmodJar.archiveFile
        archiveClassifier = "testmod"
        addNestedDependencies = false
        // includesClientOnlyClasses = true
        // clientOnlySourceSetName = sourceSets.testmodClient.name
    }
    build.dependsOn remapTestmodJar

    tasks.register('validateMixinNames', ValidateMixinNameTask) {
        source(sourceSets.main.output)
        source(sourceSets.testmod.output)
    }

    // Apply to each valid subproject.
    apply from: rootProject.file('gradle/package-info.gradle')
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "io.github.p03w.machete"

    dependencies {
        implementation(include(annotationProcessor("io.github.llamalad7:mixinextras-fabric:$project.mixinextras_version")))

        for (def module in port_lib_modules.split(',')) {
            modApi(include("io.github.fabricators_of_create.Porting-Lib:${module.trim()}:$port_lib_version+$minecraft_version"))
        }

        // EMI
        modCompileOnly("dev.emi:emi-fabric:$emi_version")
        // JEI
        //modCompileOnlyApi("mezz.jei:jei-$minecraft_version-common-api:$jei_version")
        modCompileOnly("mezz.jei:jei-$minecraft_version-fabric:$jei_version")
        // REI
        modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version")
        modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version")

        modCompileOnly("maven.modrinth:sodium:mc${minecraft_version}-${sodium_version}")
        modCompileOnly("maven.modrinth:indium:${indium_version}")

        implementation("com.electronwill.night-config:core:$project.night_config_version")
        implementation("com.electronwill.night-config:toml:$project.night_config_version")
        modApi(include("fuzs.forgeconfigapiport:forgeconfigapiport-fabric:$project.forge_config_api_port_version"))
        modApi(include("teamreborn:energy:$project.energy_version")) { transitive = false }

        modCompileOnly("me.shedaniel.cloth:cloth-config-fabric:$project.cloth_config_version")

        modCompileOnly("maven.modrinth:jade:${jade_version}")

        modCompileOnly("curse.maven:litematica-308892:$project.litematica_cf_file_id")
        modCompileOnly("curse.maven:malilib-303119:$project.malilib_cf_file_id")

        modCompileOnly("curse.maven:craftingtweaks-502516:${project.crafting_tweaks_cf_file_id}")
        modCompileOnly("curse.maven:balm-500525:${project.balm_cf_file_id}")

        modImplementation("earth.terrarium.chipped:Chipped-fabric-${minecraft_version}:${project.chipped_version}")

        modCompileOnly("vazkii.botania:Botania:${project.botania_version}") { transitive = false }

        // Test dependencies
        testmodImplementation sourceSets.main.output
        testmodImplementation fabricApi.module("fabric-gametest-api-v1", fabric_version)
    }

    fabricApi {
        configureDataGeneration()
    }

    loom {
        runs {
            datagen {
                ideConfigGenerated = true
                // property "fabric-api.datagen.modid", mod_id
            }
        }
    }

    tasks.register("generateResources") {
        group "fabric"
        generateResources.dependsOn runDatagen
    }

    machete {
//    enabled = ENV.GITHUB_RUN_NUMBER != null
        json.enabled = false
        finalizeAfter = ""
        ignoredTasks.add("jar")
        additionalTasks.add("remapJar")
    }

    tasks.remapJar.finalizedBy('optimizeOutputsOfRemapJar')

    tasks.register('optimizedJar') {
        dependsOn 'optimizeOutputsOfRemapJar'
    }
    tasks.build.dependsOn optimizedJar

    tasks.named('jar', Jar).configure {
        from("LICENSE") {
            rename { "${it}_${base.archivesName.get()}"}
        }

        manifest {
            attributes([
                    'Specification-Title'     : mod_id,
                    'Specification-Vendor'    : "p3pp3rf1y",
                    'Specification-Version'   : '1', // We are version 1 of ourselves
                    'Implementation-Title'    : name,
                    'Implementation-Version'  : jar.archiveVersion,
                    'Implementation-Vendor'   : "p3pp3rf1y",
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    tasks.register('printVersionName') {
        logger.lifecycle("$mod_id version: " + version)
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    artifactId = base.archivesName.get()
                }

                artifact(remapJar) {
                    builtBy(tasks.named('optimizedJar'))
                }

                artifact(sourcesJar) {
                    builtBy(remapSourcesJar)
                }
            }
        }
    }
}

def additionalMods(DependencyHandler deps) {
    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "emi": deps.modLocalRuntime("dev.emi:emi-fabric:$project.emi_version"); println "EMI loaded"; break
        case "jei": deps.modLocalRuntime("mezz.jei:jei-$project.minecraft_version-fabric:$project.jei_version"); println "JEI loaded"; break
        case "rei": deps.modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$project.rei_version"); println "REI loaded"; break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $project.recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }
}

dependencies {
    afterEvaluate {
        subprojects.each {
            api project(path: "${it.path}", configuration: "namedElements")

            testmodImplementation project(":${it.path}").sourceSets.testmod.output
            // testmodClientImplementation project("${it.path}:").sourceSets.testmodClient.output
        }
    }

    additionalMods(dependencies)
}

remapTestmodJar {
    def testModJarTasks = []

    subprojects {
        if (!(it.file("src/testmod").exists()/* || it.file("src/testmodClient").exists()*/)) {
            return
        }

        testModJarTasks += it.tasks.remapTestmodJar
    }

    nestedJars.setFrom(testModJarTasks)
    addNestedDependencies = true
    // clientOnlySourceSetName = sourceSets.testmodClient.name
}

loom {
    runs {
        gametest {
            inherit testmodServer

            name "Game Test"

            // Enable the gametest runner
            property "fabric-api.gametest"
            property "fabric-api.gametest.report-file", project.getLayout().getBuildDirectory().file('junit.xml').get().toString()
            runDir "build/gametest"
        }
/*
        autoTestServer {
            inherit testmodServer
            name  "Auto Test Server"
            property "fabric.autoTest"
        }
        autoTestClient {
            inherit testmodClient
            name "Auto Test Client"
            property "fabric.autoTest"
        }
*/

        // Create duplicate tasks for this, as jacoco slows things down a bit
        gametestCoverage {
            inherit gametest
            name "Game Test Coverage"
            ideConfigGenerated = false
        }

/*        autoTestClientCoverage {
            inherit autoTestClient
            name "Auto Test Client Coverage"
            ideConfigGenerated = false
        }*/
    }
}
test.dependsOn runGametest

afterEvaluate {
    loom.runs.configureEach {
        // https://fabricmc.net/wiki/tutorial:mixin_hotswaps
        vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
    }
}

def coverageTasks = [
        runGametestCoverage,
        /*runAutoTestClientCoverage*/
]

jacoco {
    coverageTasks.forEach {
        applyTo it
    }
}

tasks.register('coverage', JacocoReport) {
    dependsOn coverageTasks
    coverageTasks.forEach {
        executionData it
    }

    // Add all source as input
    allprojects { p ->
        sourceSets p.sourceSets.main, p.sourceSets.testmod
    }

    // Exclude mixins
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: '**/mixin/**')
    }))
}
